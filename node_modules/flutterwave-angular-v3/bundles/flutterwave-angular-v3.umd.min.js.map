{"version":3,"file":"flutterwave-angular-v3.umd.min.js","sources":["~/flutterwave-angular-v3/src/app/modules/models.ts","~/flutterwave-angular-v3/src/app/modules/api-tracking.service.ts","~/flutterwave-angular-v3/src/app/modules/flutterwave.service.ts","~/flutterwave-angular-v3/src/app/modules/make-payment/make-payment.component.ts","~/flutterwave-angular-v3/src/app/modules/flutterwave.module.ts"],"sourcesContent":["\n\n/**\n * Payment data object\n * @typedef {Object}\n * @property public_key {String}\n * @property callbackContext {Object}  The context of the\n * component or service that has the callback method.\n * The value must always be 'this'.\n * Using any other value might lead to error.\n * @property tx_ref {String}\n * @property amount {Number}\n * @property currency {String}\n * @property payment_options {String}\n * @property payment_plan {String}\n * @property redirect_url {String}\n * @property meta {Object}\n * @property customer {Object}\n * @property customizations {Object}\n * @property callback {Function}\n * @property onclose {Function}\n */\n  class  InlinePaymentOptions  {\n  public_key: string;\n  callbackContext?: object;\n  tx_ref: string;\n  amount: number;\n  currency?: string;\n  country?: string;\n  authorization?: object | string;\n  payment_options?: string;\n  payment_plan?: string | number;\n  subaccounts?: any;\n  integrity_hash?: any;\n  redirect_url?: string;\n  meta ?: any;\n  customer?: object;\n  customizations?: object;\n  callback?: (response: object) => void;\n  onclose?: () => void;\n}\n\n\n/**\n * Async Payment data object\n * @typedef {Object}\n * @property public_key {String}\n * @property tx_ref {String}\n * @property amount {Number}\n * @property currency {String}\n * @property payment_options {String}\n * @property meta {Object}\n * @property customer {Object}\n * @property customizations {Object}\n * @property payment_plan {String}\n */\nclass  AsyncPaymentOptions {\n  public_key: string;\n  tx_ref: string;\n  amount: number;\n  currency?: string;\n  country?: string;\n  authorization?: object | string;\n  payment_options?: string;\n  meta ?: any;\n  customer?: object;\n  customizations?: object;\n  payment_plan?: string | number;\n  subaccounts?: any;\n  integrity_hash?: any;\n}\n\n\ndeclare function  FlutterwaveCheckout(any)\n\n/**\n * Payment Response\n * @typedef {Object}\n * @property amount {String}\n * @property currency {Number}\n * @property customer {Object}\n * @property flw_ref {String}\n * @property status {String}\n * @property transaction_id {String}\n * @property tx_ref {String}\n * @property payment_plan {String}\n */\n class  PaymentSuccessResponse {\n    amount?: number;\n    currency?: string;\n    customer?: object;\n    flw_ref?: string;\n    status?: string;\n    transaction_id?: number;\n    tx_ref?: string;\n    payment_plan?: string|  number\n  }\n\n\n  export {\n    InlinePaymentOptions,\n    AsyncPaymentOptions,\n    FlutterwaveCheckout,\n    PaymentSuccessResponse\n  }\n","import {Injectable} from '@angular/core';\n\n\n@Injectable()\nexport class ApiTracking {\n\n  trackingEndPoint = 'https://kgelfdz7mf.execute-api.us-east-1.amazonaws.com/staging/sendevent';\n\n  packageVersion = '1.2.1';\n  language = 'Angular V3'\n\n  /*  trackingFeatures = {\n\n      'initiateCardCharge': 'Initiate-Card-charge',\n      'initiateCardChargeError': 'Initiate-Card-charge-error',\n      'validateCardCharge': 'Validate-Card-charge',\n      'validateCardChargeError': 'Validate-Card-charge-error',\n      'verifyCardCharge': 'Verify-Card-charge',\n      'verifyCardChargeError': 'Verify-Card-charge-error',\n      'initiateAccountCharge': 'Initiate-Account-charge',\n      'initiateAccountChargeError': 'Initiate-Account-charge-error',\n      'accountChargeValidate': 'Account-charge-validate',\n      'accountChargeValidateError': 'Account-charge-validate-error',\n      'accountChargeVerify': 'Account-charge-verify',\n      'accountChargeVerifyError': 'Account-charge-verify-error',\n\n    }*/\n\n  constructor() {\n  }\n\n  track(data: {\n    paymentData: object | any,\n    response: object | any,\n    responseTime: string\n  }) {\n\n    const trackingData = {\n      publicKey: data.paymentData.public_key,\n      language: this.language,\n      version: this.packageVersion,\n      title: '',\n      message: '0' // data.responseTime\n\n    }\n\n    const paymentOptions = data.paymentData.payment_options || ''\n    const paymentOptionsArray = paymentOptions ?  paymentOptions.split(',') : []\n\n\n\n\n    let title = ''\n\n    if (paymentOptionsArray.length === 0) {\n      title = 'Initiate-Charge-Dashboard'\n    } else if (paymentOptionsArray.length === 1) {\n      title = 'Initiate-Charge-' + paymentOptions\n\n    } else {\n      title = 'Initiate-Charge-Multiple'\n\n    }\n\n    trackingData.title = data.response.status === 'successful' ? title : title + '-error'\n\n    this.submitTracking(trackingData)\n\n  }\n\n\n  submitTracking(data) {\n\n    fetch(this.trackingEndPoint, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    }).then((res) => {\n    })\n\n  }\n\n\n}\n\n/*\n\ninterface tracking-data {\n  merchantId: string,\n  language: string\n}\n*/\n\n","import { Injectable } from '@angular/core';\nimport {AsyncPaymentOptions, FlutterwaveCheckout, InlinePaymentOptions, PaymentSuccessResponse} from './models';\nimport {ApiTracking} from './api-tracking.service';\n\n@Injectable()\nexport class Flutterwave {\n\n  constructor(private tracker: ApiTracking) {\n  }\n\n  inlinePay(paymentData: InlinePaymentOptions) {\n\n    const data = {\n      ...paymentData,\n      callback: response => {\n       this.submitToTracker(paymentData , response,  10000)\n        paymentData.callbackContext[paymentData.callback.name](response)\n      } ,\n      onclose: () => {\n        try {\n          paymentData.callbackContext[paymentData.onclose.name]()\n        } catch (e) {}\n      }\n    };\n\n    FlutterwaveCheckout(data);\n\n  }\n\n  asyncInlinePay(paymentData: AsyncPaymentOptions): Promise<PaymentSuccessResponse | 'closed'> {\n\n    return new Promise((resolve, reject) => {\n\n      paymentData = {\n        ...paymentData,\n        callback: ($event) => {\n          this.submitToTracker(paymentData , $event,  10000)\n          resolve($event)\n        } ,\n        onclose: () => resolve('closed')\n      };\n\n      FlutterwaveCheckout(paymentData)\n\n    })\n\n  }\n\n\n  submitToTracker(paymentData , response, responseTime) {\n\n\n      this.tracker.track({\n        paymentData,\n        response,\n        responseTime\n      })\n\n\n  }\n  /**\n   *\n   * @param waitDuration {Number} Seconds before closing payment modal\n   */\n  closePaymentModal(waitDuration: number = 0) {\n    setTimeout(() => {\n      document.getElementsByName('checkout')[0].setAttribute('style',\n        'position:fixed;top:0;left:0;z-index:-1;border:none;opacity:0;pointer-events:none;width:100%;height:100%;');\n      document.body.style.overflow = '';\n     // document.getElementsByName('checkout')[0].setAttribute('style', 'z-index: -1; opacity: 0')\n    } , waitDuration * 1000 )\n  }\n\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {FlutterwaveCheckout, InlinePaymentOptions, PaymentSuccessResponse} from '../models';\nimport {Flutterwave} from '../flutterwave.service';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'flutterwave-make-payment',\n  template: `\n    <button\n      style=\"{{style}}\"\n      [ngClass]=\"className ? className : 'flutterwave-pay-button' \"\n      (click)=\"makePayment()\">\n      {{text || 'Pay'}}\n    </button>\n  `,\n  styles: [`\n    .flutterwave-pay-button{\n      background-color: #f5a623;\n      border-radius: 4px;\n      border-color: #f5a623;\n      -webkit-box-shadow: 0 2px 3px 0 #ccc;\n              box-shadow: 0 2px 3px 0 #ccc;\n      color: #fff;\n      display: block;\n      font-size: 12px;\n      font-weight: 700;\n      padding: 14px 22px;\n      text-align: center;\n      text-decoration: none;\n      -webkit-transition: all .3s ease-in-out;\n      transition: all .3s ease-in-out;\n\n    }\n  `]\n})\nexport class MakePaymentComponent implements OnInit {\n\n  @Input() public_key: string;\n  @Input() tx_ref: string;\n  @Input() amount: number;\n  @Input() currency: string;\n  @Input() payment_options: string;\n  @Input() payment_plan: string | number;\n  @Input() subaccounts: any;\n  @Input() integrity_hash: any;\n  @Input() redirect_url: string;\n  @Input() meta: object; // { counsumer_id, consumer_mac}\n  @Input() customer: object; // {email, phone_number,name}\n  @Output() callback: EventEmitter<PaymentSuccessResponse> = new EventEmitter<PaymentSuccessResponse>();\n  @Output() close: EventEmitter<any> = new EventEmitter();\n  @Input() customizations: object; // {title, description, logo}\n  @Input() text: string;\n  @Input() style: any;\n  @Input() className: string;\n  @Input() data: InlinePaymentOptions;\n\n  private inlinePaymentOptions: InlinePaymentOptions;\n\n  customer_defaults = {\n    email: '',\n    phone_number: '',\n    name: '',\n  };\n  meta_defaults = {\n    consumer_id: '',\n    consumer_mac: '',\n  };\n  customizations_defaults = {\n    title: '',\n    description: '',\n    logo: '',\n  };\n\n\n  constructor(private flutterwave: Flutterwave) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  makePayment() {\n\n    this.prepareForPayment();\n    FlutterwaveCheckout(this.inlinePaymentOptions);\n\n  }\n\n  prepareForPayment(): void {\n\n    this.customer = this.customer || {};\n    this.meta = this.meta || {};\n    this.customizations = this.customizations || {};\n\n    if ( this.data ) {\n      this.inlinePaymentOptions = {\n        ...this.data,\n        callback: response => {\n          this.flutterwave.submitToTracker(this.data , response,  10000)\n        this.data.callbackContext[this.data.callback.name](response)\n      } ,\n        onclose: () => {\n          try {\n            this.data.callbackContext[this.data.onclose.name]()\n          } catch (e) {\n\n          }\n\n        } ,\n\n      }\n    } else {\n\n      this.inlinePaymentOptions = {\n        callbackContext: null,\n        public_key: this.public_key,\n        tx_ref: this.tx_ref,\n        amount: this.amount,\n        currency: this.currency || 'NGN',\n        payment_options: this.payment_options || 'card, mobilemoney, ussd',\n        redirect_url: this.redirect_url || '',\n        meta: {...this.meta_defaults, ...this.meta},\n        customer: {...this.customer_defaults, ...this.customer},\n        callback: (response: PaymentSuccessResponse) => {\n          this.flutterwave.submitToTracker(this.inlinePaymentOptions , response,  10000)\n          this.callback.emit(response)\n        },\n        onclose: () => this.close.emit(),\n        customizations: {...this.customizations_defaults\n          , ...this.customizations}\n      }\n      if (this.payment_plan) {\n        this.inlinePaymentOptions.payment_plan = this.payment_plan\n      }\n      if (this.subaccounts) {\n        this.inlinePaymentOptions.subaccounts = this.subaccounts\n      }\n      if (this.integrity_hash) {\n        this.inlinePaymentOptions.integrity_hash = this.integrity_hash\n      }\n    }\n\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MakePaymentComponent } from './make-payment/make-payment.component';\nimport {Flutterwave} from './flutterwave.service';\nimport {ApiTracking} from './api-tracking.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [MakePaymentComponent] ,\n  providers: [Flutterwave, ApiTracking],\n  exports: [MakePaymentComponent]\n})\nexport class FlutterwaveModule {\n  constructor() {\n\n      const inlineSdk = 'https://checkout.flutterwave.com/v3.js';\n      const script = document.createElement('script');\n      script.src = inlineSdk;\n      if (!document.querySelector(`[src=\"${inlineSdk}\"]`)) {\n        document.body.appendChild(script)\n      }\n\n\n  }\n}\n"],"names":["InlinePaymentOptions","AsyncPaymentOptions","PaymentSuccessResponse","ApiTracking","this","trackingEndPoint","packageVersion","language","prototype","track","data","trackingData","publicKey","paymentData","public_key","version","title","message","paymentOptions","payment_options","paymentOptionsArray","split","length","response","status","submitTracking","fetch","method","body","JSON","stringify","then","res","decorators","type","Injectable","ctorParameters","Flutterwave","tracker","inlinePay","_this","Object","assign","callback","submitToTracker","callbackContext","name","onclose","e","FlutterwaveCheckout","asyncInlinePay","Promise","resolve","reject","$event","responseTime","closePaymentModal","waitDuration","setTimeout","document","getElementsByName","setAttribute","style","overflow","MakePaymentComponent","flutterwave","EventEmitter","close","customer_defaults","email","phone_number","meta_defaults","consumer_id","consumer_mac","customizations_defaults","description","logo","ngOnInit","makePayment","prepareForPayment","inlinePaymentOptions","customer","meta","customizations","tx_ref","amount","currency","redirect_url","emit","payment_plan","subaccounts","integrity_hash","Component","args","selector","template","styles","propDecorators","Input","Output","text","className","FlutterwaveModule","inlineSdk","script","createElement","src","querySelector","appendChild","NgModule","imports","CommonModule","declarations","providers","exports"],"mappings":"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"}
